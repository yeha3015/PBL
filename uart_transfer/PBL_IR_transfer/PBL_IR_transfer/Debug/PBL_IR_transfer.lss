
PBL_IR_transfer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000db7  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c02  00000000  00000000  0000105f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000053e  00000000  00000000  00001c61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  000021a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e4  00000000  00000000  00002264  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ef  00000000  00000000  00002848  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002a37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  6c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  70:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  74:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  7c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  80:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  84:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  88:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  8c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  90:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  94:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  98:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  9c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  bc:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <GoTo16MHz>:
#include <util/delay.h>

#include "my_lib.h"

void GoTo16MHz(){
    CLKPR = 0x80;
  c4:	e1 e6       	ldi	r30, 0x61	; 97
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 e8       	ldi	r24, 0x80	; 128
  ca:	80 83       	st	Z, r24
    CLKPR = 0;
  cc:	10 82       	st	Z, r1
  ce:	08 95       	ret

000000d0 <main>:
int main(void)
{
    uint8_t recv_data;
	uint8_t send_byte;

    GoTo16MHz();
  d0:	0e 94 62 00 	call	0xc4	; 0xc4 <GoTo16MHz>
    USART1_Init();
  d4:	0e 94 a3 00 	call	0x146	; 0x146 <USART1_Init>
    DDRB &= ~0x01;
  d8:	84 b1       	in	r24, 0x04	; 4
  da:	8e 7f       	andi	r24, 0xFE	; 254
  dc:	84 b9       	out	0x04, r24	; 4
	DDRB |= 0x02;
  de:	84 b1       	in	r24, 0x04	; 4
  e0:	82 60       	ori	r24, 0x02	; 2
  e2:	84 b9       	out	0x04, r24	; 4
	
	PORTB &= ~0x02;
  e4:	85 b1       	in	r24, 0x05	; 5
  e6:	8d 7f       	andi	r24, 0xFD	; 253
  e8:	85 b9       	out	0x05, r24	; 5

    while (1) {
        //printf("%d\n", PINB & 0x01);
        recv_data = PINB & 0x01;
  ea:	83 b1       	in	r24, 0x03	; 3
		while((PINB & 0x01) == 0x01){
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <main+0x22>
			PORTB = 0x02;
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~0x02;

    while (1) {
        //printf("%d\n", PINB & 0x01);
        recv_data = PINB & 0x01;
		while((PINB & 0x01) == 0x01){
  f2:	18 99       	sbic	0x03, 0	; 3
  f4:	fc cf       	rjmp	.-8      	; 0xee <main+0x1e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	8f e9       	ldi	r24, 0x9F	; 159
  f8:	9f e0       	ldi	r25, 0x0F	; 15
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <main+0x2a>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x30>
 100:	00 00       	nop
			PORTB = 0x02;
		}
		_delay_ms(1);
		PORTB = 0x00;
 102:	15 b8       	out	0x05, r1	; 5
		uint8_t recv_byte = 0x00;
		for(int i = 0; i < 8; i++){
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	90 e0       	ldi	r25, 0x00	; 0
		while((PINB & 0x01) == 0x01){
			PORTB = 0x02;
		}
		_delay_ms(1);
		PORTB = 0x00;
		uint8_t recv_byte = 0x00;
 108:	20 e0       	ldi	r18, 0x00	; 0
		for(int i = 0; i < 8; i++){
 10a:	16 c0       	rjmp	.+44     	; 0x138 <main+0x68>
			recv_data = PINB & 0x01;
 10c:	33 b1       	in	r19, 0x03	; 3
			recv_byte += recv_data << i;
 10e:	31 70       	andi	r19, 0x01	; 1
 110:	c3 2f       	mov	r28, r19
 112:	e0 e0       	ldi	r30, 0x00	; 0
 114:	de 2f       	mov	r29, r30
 116:	ae 01       	movw	r20, r28
 118:	08 2e       	mov	r0, r24
 11a:	02 c0       	rjmp	.+4      	; 0x120 <main+0x50>
 11c:	44 0f       	add	r20, r20
 11e:	55 1f       	adc	r21, r21
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <main+0x4c>
 124:	24 0f       	add	r18, r20
 126:	ef e9       	ldi	r30, 0x9F	; 159
 128:	ff e0       	ldi	r31, 0x0F	; 15
 12a:	31 97       	sbiw	r30, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <main+0x5a>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x60>
 130:	00 00       	nop
			_delay_ms(1);
			send_byte = ~recv_byte;
 132:	12 2f       	mov	r17, r18
 134:	10 95       	com	r17
			PORTB = 0x02;
		}
		_delay_ms(1);
		PORTB = 0x00;
		uint8_t recv_byte = 0x00;
		for(int i = 0; i < 8; i++){
 136:	01 96       	adiw	r24, 0x01	; 1
 138:	88 30       	cpi	r24, 0x08	; 8
 13a:	91 05       	cpc	r25, r1
 13c:	3c f3       	brlt	.-50     	; 0x10c <main+0x3c>
			send_byte = ~recv_byte;
			if(send_byte == 0x00){
				continue;
			}
		}
		UART1_Byte_Send((char)send_byte);
 13e:	81 2f       	mov	r24, r17
 140:	0e 94 b4 00 	call	0x168	; 0x168 <UART1_Byte_Send>
		//_delay_ms(500);
    }
 144:	d2 cf       	rjmp	.-92     	; 0xea <main+0x1a>

00000146 <USART1_Init>:
#include <avr/io.h>

 // シリアル通信の設定 (115.2kbps)
 void USART1_Init( void )
 {
	 UBRR1  = 8; // 動作周波数(Hz) / (ボーレート * 16) - 1
 146:	88 e0       	ldi	r24, 0x08	; 8
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
 14e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
	 UCSR1A = 0b00000000;
 152:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
	 UCSR1B = 0b00011000; // 送受信可
 156:	88 e1       	ldi	r24, 0x18	; 24
 158:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f80c9>
	 UCSR1C = 0b00000110; // データ8bit, 非同期, パリティなし, Stop 1bit
 15c:	86 e0       	ldi	r24, 0x06	; 6
 15e:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f80ca>
	 //UCSR1D = 0b00000010; // flow control : CTS有効
	 UCSR1D = 0b00000000; // flow control : CTS無効
 162:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <__TEXT_REGION_LENGTH__+0x7f80cb>
 166:	08 95       	ret

00000168 <UART1_Byte_Send>:
 }

 // UART1へのバイトデータの送信
 void UART1_Byte_Send ( uint8_t data )
 {
	 while( ( UCSR1A & ( 1 << UDRE1 ) ) == 0 ); // 送信可フラグが立つまで待つ．
 168:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 16c:	95 ff       	sbrs	r25, 5
 16e:	fc cf       	rjmp	.-8      	; 0x168 <UART1_Byte_Send>
	 UDR1 = data;
 170:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 174:	08 95       	ret

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
